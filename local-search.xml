<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Microsoft E5 Renew X</title>
    <link href="/2022/03/13/Microsoft-E5-Renew-X/"/>
    <url>/2022/03/13/Microsoft-E5-Renew-X/</url>
    
    <content type="html"><![CDATA[<h1 id="Microsoft-365-E5-Renew-X"><a href="#Microsoft-365-E5-Renew-X" class="headerlink" title="Microsoft 365 E5 Renew X"></a>Microsoft 365 E5 Renew X</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Microsoft 365 E5 Renew X是一款网页版的E5续订服务，其依赖网页浏览器呈现支持用户多端操作，完全将E5账户API调用托管在了服务器端因此用户无需电脑也可使用。</p><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>Microsoft 365 E5 Renew X为Microsoft 365 E5 Web的升级版，相对于旧版其增强了管理功能且更容易部署，API调用内核继承于续订桌面版软件Microsoft 365 E5 Renew Plus。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h3><p>·两种可选的调用权限：用户未登录作为守护程序调用(需要客户端密码)、程序以登录用户身份直接调用(需要账户密码)<br>·API种类齐全：41&#x2F;30个可选的Microsoft Graph REST API Beta中的API(未来可能会继续添加)<br>·完全随机的API调用模式：从已选定的API序列中随机抽取一个或几个进行调用（个数和API随机）<br>·完全随机的API调用时间间隔：随机区段1000s-2000s固定<br>·完全随机的API内容(仅部分API支持)：发送邮件的内容随机 Onedirve上传文件的内容随机<br>·邮件通知服务：支持设置通知邮箱，调用异常会通过邮件通知无需反复登录查看</p><h3 id="部署端"><a href="#部署端" class="headerlink" title="部署端"></a>部署端</h3><p>·平台兼容性：使用Asp.Net Core 作为跨平台框架增适用于 Windows|Linux|MacOS x64|x86|ARM64|ARM<br>·灵活部署：支持开放站点部署和私享部署，私享部署不再强制要求配置Https和OAuth<br>·无需数据库：不需要后台数据库支持，前后台一体化程序<br>·用户后台管理：可修改用户的E5账户数量，以及封删管理<br>·系统状态监视：系统占用率一目了然，可控的站点注册通道更容易控制系统用户数量<br>·自定义页面：支持自定义HTML静态页面，可设置支付宝、微信收款码<br>·显示ICP备案：支持ICP备案文字显示，可在国内备案建站<br>·无人值守 运行自动暂停：可自动暂停有错误率过高的账号API调用<br>·无人值守 自动恢复运行：可定期自动恢复全部账号的API调用，防止因微软网络原因触发大量账号停止API调用进而导致的账号续期失败</p><h2 id="用户端使用教程-请勿开启账号的双重验证功能"><a href="#用户端使用教程-请勿开启账号的双重验证功能" class="headerlink" title="用户端使用教程(请勿开启账号的双重验证功能)"></a>用户端使用教程(请勿开启账号的双重验证功能)</h2><h3 id="可用站点"><a href="#可用站点" class="headerlink" title="可用站点"></a>可用站点</h3><h4 id="主站"><a href="#主站" class="headerlink" title="主站"></a>主站</h4><p>主站：<a href="https://e5.sundayrx.net(由/">https://e5.sundayrx.net（由</a> SundayRX 运营）(可登录不可注册)</p><p>分站：<a href="https://ms-e5-renew.leeskyler.top:11015（由">https://ms-e5-renew.leeskyler.top:11015（由</a> leeskyler 运营）(已关停)</p><p>分站：<a href="https://ms-e5-renew-3.eastern.moe(由/">https://ms-e5-renew-3.eastern.moe（由</a> leeskyler 运营）(已关停)</p><h4 id="自建共享站点"><a href="#自建共享站点" class="headerlink" title="自建共享站点"></a>自建共享站点</h4><p>自建共享站：<a href="https://ew.chirmyram.com(由/">https://ew.chirmyram.com（由</a> 七米蓝 运营）(可登录不可注册)</p><p>自建共享站：<a href="https://e5.hm0420.cc(由/">https://e5.hm0420.cc（由</a> 小冰酱 运营）</p><p>自建共享站：<a href="https://ms-e5.hm0420.cc(由/">https://ms-e5.hm0420.cc（由</a> 小冰酱 运营）</p><p>自建共享站：<a href="https://e5.xzh.wtf(由/">https://e5.xzh.wtf（由</a> XZH 运营）</p><p>自建共享站：<a href="https://e5.tianli0.top(由/">https://e5.tianli0.top（由</a> Tinali 运营）</p><p>自建共享站：<a href="https://renew.lrize.xyz(由/">https://renew.lrize.xyz（由</a> Lrize、 运营）</p><h3 id="注册Azure应用程序"><a href="#注册Azure应用程序" class="headerlink" title="注册Azure应用程序"></a>注册Azure应用程序</h3><h4 id="应用注册"><a href="#应用注册" class="headerlink" title="应用注册"></a>应用注册</h4><p>点击登录 <a href="https://portal.azure.com/#home">Azure</a></p><p>登录申请的Microsoft 365 E5的管理员账户（账户名类似<a href="mailto:&#88;&#x58;&#88;&#x58;&#64;&#89;&#89;&#89;&#x59;&#46;&#x6f;&#110;&#x6d;&#105;&#x63;&#114;&#x6f;&#x73;&#111;&#102;&#116;&#x2e;&#99;&#111;&#109;">&#88;&#x58;&#88;&#x58;&#64;&#89;&#89;&#89;&#x59;&#46;&#x6f;&#110;&#x6d;&#105;&#x63;&#114;&#x6f;&#x73;&#111;&#102;&#116;&#x2e;&#99;&#111;&#109;</a>格式）</p><p>登录完成后点击右上角的“门户”按钮进入Azure管理中心，在搜索栏内输入“应用注册”，点击进入<a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">快捷链接</a>。</p><p>点击“新注册”按钮</p><p>名称随意写，注意可访问性选项选择最后一项、重定向URL暂时不填 、完成后点击注册</p><h4 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h4><p>配置应用重定向URL（身份验证）</p><p>先点击“概述”，然后点击“添加重定向URL”，进入重定向URL配置界面，下图中的应用程序(客户端)ID即为”客户端ID”。</p><p>点击“添加平台”，再点击“移动和桌面应用程序”</p><p>继续勾选中第一个URL，最后点击底部的“配置”</p><p>该URL为“<a href="https://login.microsoftonline.com/common/oauth2/nativeclient%E2%80%9D(%E4%B9%9F%E5%8F%AF%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0)%E3%80%82">https://login.microsoftonline.com/common/oauth2/nativeclient”(也可手动添加)。</a></p><p>配置默认客户端类型将应用程序视为公共客户端 点击切换按钮为“是” ，最后点击“保存”按钮保存。</p><h4 id="配置应用程序的API权限（重要）"><a href="#配置应用程序的API权限（重要）" class="headerlink" title="配置应用程序的API权限（重要）"></a>配置应用程序的API权限（重要）</h4><p>· 小白提示：建议选择“委托的权限(用户登录)”该权限类型，调用API较多，操作步骤较少简单粗暴，调用成功几率高</p><p>注册的应用程序API权限类型有两种，其主要区别如下表所示：</p><p>权限类型    委托的权限(用户登录)    应用程序权限(非用户登录)<br>官方释义    应用程序必须以登录用户身份访问API    应用程序在用户未登录的情况下作为后台服务或守护程序运行<br>需要的信息    账户名称+账户密码+应用程序(客户端)ID    账户名称+客户端机密+应用程序(客户端)ID<br>功能影响    程序中所有API均可调用    部分API权限受限无法调用(官方限制)<br>API权限配置    可由PC版程序自动配置添加API权限    必须手动配置API权限<br>显示颜色标识    蓝色    深青色</p><p>以下是登录或非登录所需要的权限列表：</p><p>最后根据所选的API权限类型在：2.1 选择“委托的权限(用户登录)”类型的API或者2.2 选择“应用程序权限(非用户登录)”类型的API中选择性阅读。</p><h5 id="选择“委托的权限-用户登录-”类型的API"><a href="#选择“委托的权限-用户登录-”类型的API" class="headerlink" title="选择“委托的权限(用户登录)”类型的API"></a>选择“委托的权限(用户登录)”类型的API</h5><p>点击“API权限”-“添加权限”-“Microsoft Graph”</p><p>选择“委托的权限”</p><p>根据编辑页面中列出的API权限需求表（注意在程序中切换为”登录”）来勾选所对应的API权限，全部选择完成后点击”添加权限”。</p><p>添加完成的效果如图</p><p>如果没有“代表XXX授予管理员同意”按钮 说明该账号不是管理员账号 换登管理员账号创建应用</p><p>最后点击代表XXX授予管理员同意,对话框选择“是”（该图包含了当前程序“委托的权限(用户登录)”全部API所需要的权限）。</p><h5 id="选择“应用程序权限-非用户登录-”类型的API"><a href="#选择“应用程序权限-非用户登录-”类型的API" class="headerlink" title="选择“应用程序权限(非用户登录)”类型的API"></a>选择“应用程序权限(非用户登录)”类型的API</h5><p>点击“API权限”-“添加权限”-“Microsoft Graph”</p><p>选择“应用程序权限”</p><p>根据编辑页面中列出的API权限需求表（注意在程序中切换为”非登录”）来勾选所对应的API权限，全部选择完成后点击”添加权限”。</p><p>添加完成的效果如图</p><p>如果没有“代表XXX授予管理员同意”按钮 说明该账号不是管理员账号 换登管理员账号创建应用</p><p>最后点击代表XXX授予管理员同意,对话框选择“是”（该图包含了当前程序“应用程序权限(非用户登录)”全部API所需要的权限）。</p><h4 id="创建客户端密码"><a href="#创建客户端密码" class="headerlink" title="创建客户端密码"></a>创建客户端密码</h4><p>点击“证书密码”-“新客户端密码”-“24个月”-“添加”</p><p>点击“值”该列中的“复制”（不要复制”ID”列中的值），并立即将该密码保存至电脑，保存的值即为“客户端密码”， 注：该值必须立即保存，退出该页面后将永远无法查看。进入网站注册并登录账户</p><p>从一开始的可用站点，选择站点进入（记住无论使用任何人运营网站显示内容都是基本相同的）</p><p>从两种登录中任选一个，这里不建议选择GitHub登录（GitHub的第三方登录很迷经常性崩溃）</p><p>第一次登录账户系统会显示注册成功，然后再登录一次即可登录进入系统</p><p>3.2 激活您的账户<br>阅读并同意用户协议，点击激活账户</p><p>3.3 添加一个E5账户的运行配置信息<br>在成功登录系统后，页面会自动跳转到“主页”页面，在“账户详情”页面点击“添加运行账号”按钮，前往“账户运行配置”页面</p><p>在账户运行配置页面中填写账户信息，且登录调用填写账户密码、非登录调用填写客户端密码，并选择自己选定的调用方式，注意调用方式不要选错了！！！ 最后点击“添加运行账号”按钮完成配置。</p><p>由于前后台数据同步需要时间，任何添加账户或者修改账户配置信息的操作都不会立即被后台执行。</p><p>返回用户页面查看账户信息中的“配置同步状态”，如果显示为“正在运行”表明配置已经上传至后台，修改账户配置成功。<br>警示：配置成功了也要定期来看看自己的账户是否在正常运行（虽然有邮件通知服务），但也建议每月查看一次账户状态！！！</p><p>3.4 设置一个通知邮箱（可选）<br>在任何页面下 点击右上角“用户名-账户设置”，进入个人信息设置</p><p>记住你的UID，出现任何问题请使用这个UID与你所选站点的管理员沟通<br>编辑你的邮箱 并点击保存</p><p>传统方式服务部署<br>安装运行环境<br>以下示例可能不完全包含全部操作系统，但无论是哪种系统都要安装 Asp.Net Core 3.1 SDK支持包，服务程序运行依赖于这个包也只依赖这一个包，只要成功安装了Asp.Net Core 3.1 SDK支持包，服务程序就可以正常运行！<br>详情请参阅在 Windows、Linux 和 macOS 上安装 .NET</p><p>Windows<br>前往<a href="https://dotnet.microsoft.com/download/dotnet/3.1%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84Asp.Net">https://dotnet.microsoft.com/download/dotnet/3.1下载安装最新的Asp.Net</a> Core 3.1 SDK 安装包</p><p>Ubuntu<br>详情请参阅在 Ubuntu 上安装 .NET SDK 或 .NET 运行时</p><p>CentOS<br>详情请参阅在 CentOS 上安装 .NET SDK 或 .NET 运行时</p><p>CentOS 8<br>sudo dnf install dotnet-sdk-3.1<br>CentOS 7<br>sudo rpm -Uvh <a href="https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm">https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</a><br>sudo yum install dotnet-sdk-3.1</p><p>MacOS<br>前往<a href="https://dotnet.microsoft.com/download/dotnet/3.1%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84Asp.Net">https://dotnet.microsoft.com/download/dotnet/3.1下载安装最新的Asp.Net</a> Core 3.1 SDK 安装包</p><p>填写配置信息<br>站点拥有开放和私用两种模式，请根据自己的部署目的来选择对应的教程来阅读！<br>配置文件是Deploy&#x2F;Config.xml 务必打开并修改默认的管理员登录密码</p><p>开放站点<br>开放站点必须使用全链路HTTPS，即便是使用了Nginx反向代理也必须设置HTTPS为启用状态</p><p>Configuration.ShareSite.Enable设置为true</p><p>HTTPS SSL证书<br>方式1：服务程序Kestrel—(HTTPS)—外部Internet<br>准备一个PFX格式的SSL证书文件，放置在Deploy文件夹中</p><p>Configuration.HTTPS.Enable设置为true<br>Configuration.HTTPS.Certificate设置为PFX文件的名称带后缀名<br>Configuration.HTTPS.Password设置为PFX文件的密码</p><p>方式2：服务程序Kestrel—(HTTPS localhost)—Nginx&#x2F;IIS&#x2F;Apache—(HTTPS 外部访问域名)—外部Internet<br>反向代理服务器部分请自行配置</p><p>执行下列两个命令 以创建localhsot HTTPS证书 该证书时效为1年<br>dotnet dev-certs https –clean<br>dotnet dev-certs https –trust</p><p>Configuration.HTTPS.Enable设置为true<br>Configuration.HTTPS.Certificate设置为空（什么都不要填）<br>Configuration.HTTPS.Password设置为空（什么都不要填）</p><p>Microsoft OAuth<br>Github OAuth<br>SMTP邮件服务<br>准备一个可以使用SMTP服务发信的邮箱</p><p>Configuration.ShareSite.SMTP.Email设置为 发件人邮箱地址<br>Configuration.ShareSite.SMTP.Password设置为 邮箱密钥<br>Configuration.ShareSite.SMTP.Host设置为 发件人邮箱的SMTP服务器地址 (以Outlook为例子是smtp.office365.com)</p><p>私用<br>在私用模式下不用准备任何配置信息，填写好登录密码端口即可使用！</p><p>启用HTTPS（选配）<br>若要启用HTTPS请在下面选择一种合适的方式来实现</p><p>方式1：服务程序Kestrel—(HTTPS)—外部Internet<br>准备一个PFX格式的SSL证书文件，放置在Deploy文件夹中</p><p>Configuration.HTTPS.Enable设置为true<br>Configuration.HTTPS.Certificate设置为PFX文件的名称带后缀名<br>Configuration.HTTPS.Password设置为PFX文件的密码</p><p>方式2：服务程序Kestrel—(HTTP)—Nginx&#x2F;IIS&#x2F;Apache—(HTTPS 外部访问域名)—外部Internet<br>反向代理服务器部分请自行配置</p><p>Configuration.HTTPS.Enable设置为false</p><p>启动服务程序<br>在任何系统下，打开命令行定位到程序目录 运行dotnet Microsoft365_E5_Renew_X.dll命令即可启动</p><p>管理员登录<br>非OAuth后台登录（开放或私享部署皆可用）<br>管理员登录路由 &#x2F;Admin&#x2F;Login 默认密码在配置文件Deploy&#x2F;Config.xml中更改</p><p>OAuth认证登录（仅开放部署可用）<br>设置管理员OAuth登录的OAuthID<br>使用想要关联的OAuth账号（Microsoft&#x2F;Github）在任意站点登录&#x2F;注册均可看到此账号的OAuthID,记录此ID</p><p>通过管理员密码登录自己的站点：管理员功能-用户列表 找到管理员账户 点击“编辑”按钮填写记录的OAuthID 保存</p><p>直接在主登录页面使用与管理员账户关联的OAuth账号登录即可<br>————————————————<br>版权声明：本文为CSDN博主「SundayRX」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_33212020/article/details/119747634">https://blog.csdn.net/qq_33212020/article/details/119747634</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo+GitHub 搭建个人免费博客教程</title>
    <link href="/2022/03/13/%E4%BD%BF%E7%94%A8-Hexo-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <url>/2022/03/13/%E4%BD%BF%E7%94%A8-Hexo-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>越来越多的用户喜欢使用<code>GitHub Pages</code>来搭建<code>Hexo</code>静态博客网站,它不仅完全免费使用，并且非常稳定。</p><p>本文会详细说明如何使用<code>Hexo + GitHub</code>搭建免费个人博客网站的教程。</p><p>看起来有点繁杂，认真跟教程走，完整操作一遍大概需要 30 分钟。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h3><p><code>GitHub Pages</code>是由 <code>GitHub</code>官方提供的一种免费的静态站点托管服务，让我们可以在<code>GitHub</code>仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h3><p><code>Hexo</code>是一个快速、简洁且高效的静态博客框架，它基于<code>Node.js</code>运行，可以将我们撰写的<code>Markdown</code>文档解析渲染成静态的<code>HTML</code>网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写<code>Markdown</code>格式文章后，通过<code>Hexo</code>解析文档，渲染生成具有主题样式的<code>HTML</code>静态网页，再推送到<code>GitHub</code>上完成博文的发布。</p><h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a>优点和不足</h3><p>优点：完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在<code>GitHub</code>，安全省心；迁移方便……</p><p>不足：发文不便，依赖于本地环境；更适合个人博客使用,<code>GitHub</code>在国内访问速度有点不快。</p><h2 id="搭建条件"><a href="#搭建条件" class="headerlink" title="搭建条件"></a>搭建条件</h2><h5 id="1-Github账号"><a href="#1-Github账号" class="headerlink" title="1. Github账号"></a>1. Github账号</h5><h5 id="2-Git-for-Windows（或者其他Git客户端）"><a href="#2-Git-for-Windows（或者其他Git客户端）" class="headerlink" title="2. Git for Windows（或者其他Git客户端）"></a>2. Git for Windows（或者其他Git客户端）</h5><h5 id="3-node-js、npm"><a href="#3-node-js、npm" class="headerlink" title="3. node.js、npm"></a>3. node.js、npm</h5><blockquote><p>本文使用环境<br>Windows 11 (22000.120)<br>node.js(12.22.4)<br>npm(6.14.14)<br>git(2.32.0)<br>hexo-cli( 4.3.0)</p></blockquote><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><ul><li>注意事项</li><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li></ul><p><code>Hexo</code>基于<code>Node.js</code>，搭建过程中还需要使用 <code>npm(Node.js自带)</code>和<code>git</code>，因此先搭建本地操作环境，安装<code>Node.js</code>和<code>Git</code>，点击跳转<a href="https://nodejs.org/zh-cn">Node.js</a> 和  <a href="https://git-scm.com/downloads">Git</a></p><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开</p><p>依次输入<code>node -v</code> <code>npm -v</code>和<code>git --version</code>并回车</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Users\lrize&gt;node -v<br><span class="hljs-attribute">v12</span>.<span class="hljs-number">22</span>.<span class="hljs-number">4</span><br><br><span class="hljs-attribute">C</span>:\Users\lrize&gt;npm -v<br><span class="hljs-attribute">6</span>.<span class="hljs-number">14</span>.<span class="hljs-number">14</span><br><br><span class="hljs-attribute">C</span>:\Users\lrize&gt;git --version<br><span class="hljs-attribute">git</span> version <span class="hljs-number">2</span>.<span class="hljs-number">32</span>.<span class="hljs-number">0</span>.windows.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如上出现程序版本号即可。</p><h3 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2. 连接 Github"></a>2. 连接 Github</h3><h4 id="2-1-使用邮箱注册GitHub账户，选择免费账户（Free），并完成邮件验证。"><a href="#2-1-使用邮箱注册GitHub账户，选择免费账户（Free），并完成邮件验证。" class="headerlink" title="2.1 使用邮箱注册GitHub账户，选择免费账户（Free），并完成邮件验证。"></a>2.1 使用邮箱注册<code>GitHub</code>账户，选择免费账户（Free），并完成邮件验证。</h4><h4 id="2-2-桌面右键-gt-Git-Bash-Here，设置用户名和邮箱："><a href="#2-2-桌面右键-gt-Git-Bash-Here，设置用户名和邮箱：" class="headerlink" title="2.2 桌面右键 -&gt; Git Bash Here，设置用户名和邮箱："></a>2.2 桌面右键 -&gt; Git Bash Here，设置用户名和邮箱：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;GitHub 用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure><ul><li>替换为你的Github的用户名和注册邮箱</li></ul><h4 id="2-3-创建-SSH-密匙："><a href="#2-3-创建-SSH-密匙：" class="headerlink" title="2.3 创建 SSH 密匙："></a>2.3 创建 SSH 密匙：</h4><p>输入</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后一路回车。</p><h4 id="2-4-给Github添加密匙："><a href="#2-4-给Github添加密匙：" class="headerlink" title="2.4 给Github添加密匙："></a>2.4 给<code>Github</code>添加密匙：</h4><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”）</p><p>用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆<code>GitHub</code>，进入<code>Settings</code>页面，选择左边栏的<code>SSH and GPG keys</code>，点击<code>New SSH key</code>。</p><p><img src="https://cite.lrize.xyz/Lrize/Cite/Blog/Hexo/SSH(1).png" alt="image"></p><p><code>Title</code>随便取个名字，粘贴复制的<code>id_rsa.pub</code>全部内容<code>Key</code>中，点击<code>Add SSH key</code>完成添加。</p><p><img src="https://cite.lrize.xyz/Lrize/Cite/Blog/Hexo/SSH(2).png" alt="image"></p><h4 id="2-5-验证连接："><a href="#2-5-验证连接：" class="headerlink" title="2.5 验证连接："></a>2.5 验证连接：</h4><p>打开<code>Git Bash</code>，输入<code>ssh -T git@github.com</code>出现<code>“Are you sure……”</code>，输入<code>yes</code> 回车确认。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">C:</span>\Users\lrize&gt;ssh -T git@github.com<br>Hi K-Lrize! You<span class="hljs-comment">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>显示<code>“Hi xxx! You&#39;ve successfully……”</code>即连接成功。</p><h3 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3. 创建 Github Pages 仓库"></a>3. 创建 Github Pages 仓库</h3><p><code>GitHub</code>主页右上角加号 -&gt;<code>New repository</code>：</p><p><code>Repository name</code>中输入<code>用户名.github.io</code></p><p>这里需要注意<code>repository name</code>必须这种格式：<code>用户名.github.io</code></p><p><img src="https://cite.lrize.xyz/Lrize/Cite/Blog/Hexo/New_Repository(1).png" alt="image"></p><p>勾选<code>“Initialize this repository with a README”</code></p><p><code>Description</code>选填，填好后点击<code>Create repository</code>创建。</p><p>创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io</p><h3 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4. 本地安装 Hexo 博客程序"></a>4. 本地安装 Hexo 博客程序</h3><p>新建一个文件夹用来存放<code>Hexo</code>的程序文件，如<code>Hexo-Blog</code>，此文件夹需要长期保存。打开该文件夹，右键 -&gt; <code>Git Bash Here</code>。</p><h4 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1 安装 Hexo"></a>4.1 安装 Hexo</h4><p>使用<code>npm</code>一键安装<code>Hexo</code>博客程序：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>Mac 用户需要管理员权限（sudo），运行这条命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如下图。</p><p><img src="https://cite.lrize.xyz/Lrize/Cite/Blog/Hexo/My_blog_directory.png" alt="image"></p><h4 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="4.2 Hexo 初始化和本地预览"></a>4.2 Hexo 初始化和本地预览</h4><p>初始化并安装所需组件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init      <span class="hljs-comment"># 初始化</span><br>npm <span class="hljs-keyword">install</span>    <span class="hljs-comment"># 安装组件</span><br></code></pre></td></tr></table></figure><p>完成后依次输入下面命令，启动本地服务器进行预览：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo g   <span class="hljs-comment"># 生成页面</span><br>hexo s   <span class="hljs-comment"># 启动预览</span><br>访问 http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span>，出现 Hexo 默认页面，本地博客安装成功！<br></code></pre></td></tr></table></figure><p>Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</p><h3 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h3><p>本地博客测试成功后，就是上传到<code>GitHub</code>进行部署，使其能够在网络上访问。</p><p>首先安装<code>hexo-deployer-git</code>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件末尾的<code>Deployment</code>部分，修改成如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>完成后运行<code>hexo d</code>将网站上传部署到<code>GitHub Pages</code>。</p><p>完成！这时访问我们的<code>GitHub</code>域名<code>https://用户名.github.io</code>就可以看到<code>Hexo</code>网站了。</p><p>安装环节都到此结束了，下面讲讲<code>hexo</code>的配置</p><h2 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h2><h3 id="1-网站设置"><a href="#1-网站设置" class="headerlink" title="1. 网站设置"></a>1. 网站设置</h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的<code>_config.yml</code>文件中，参考官方文档按需要编辑。</p><ul><li>注意：冒号后要加一个空格！</li></ul><h3 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2. 开始使用"></a>2. 开始使用</h3><h4 id="2-1-发布文章"><a href="#2-1-发布文章" class="headerlink" title="2.1 发布文章"></a>2.1 发布文章</h4><p>进入博客所在目录，右键打开Git Bash Here，创建博文：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>然后<code>source</code>文件夹中会出现一个<code>My New Post.md</code>文件，就可以使用<code>Markdown</code>编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g   <span class="hljs-comment"># 生成页面</span><br>hexo d   <span class="hljs-comment"># 部署发布</span><br></code></pre></td></tr></table></figure><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式<code>Front-matter</code>即可，写完后运行<code>hexo g</code>和<code>hexo d</code>发布。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span> <span class="hljs-comment"># 标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019</span><span class="hljs-string">/3/26</span> <span class="hljs-string">hh:mm:ss</span> <span class="hljs-comment"># 时间</span><br><span class="hljs-attr">categories:</span> <span class="hljs-comment"># 分类</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br><span class="hljs-attr">tags:</span> <span class="hljs-comment"># 标签</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">PS3</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Games</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">摘要</span><br><span class="hljs-string">&lt;!--more--&gt;</span><br><span class="hljs-string">正文</span><br></code></pre></td></tr></table></figure><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;name&quot;</span>       <span class="hljs-meta"># 新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;name&quot;</span>  <span class="hljs-meta"># 新建页面</span><br>hexo g                <span class="hljs-meta"># 生成页面</span><br>hexo d                <span class="hljs-meta"># 部署</span><br>hexo g -d             <span class="hljs-meta"># 生成页面并部署</span><br>hexo s                <span class="hljs-meta"># 本地预览</span><br>hexo clean            <span class="hljs-meta"># 清除缓存和已生成的静态文件</span><br>hexo help             <span class="hljs-meta"># 帮助</span><br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h4 id="1-很多命令既可以用Windows的-cmd-来完成，也可以使用-git-bash-x2F-git-cmd来完成"><a href="#1-很多命令既可以用Windows的-cmd-来完成，也可以使用-git-bash-x2F-git-cmd来完成" class="headerlink" title="1. 很多命令既可以用Windows的 cmd 来完成，也可以使用 git bash &#x2F; git cmd来完成"></a>1. 很多命令既可以用Windows的 cmd 来完成，也可以使用 git bash &#x2F; git cmd来完成</h4><h4 id="2-git安装版会集成鼠标右键菜单-git-bash-here-，所以下面很多步骤中需要通过git跳转到某个目录的，你可以直接打开这个目录，在空白处右键-git-bash-here"><a href="#2-git安装版会集成鼠标右键菜单-git-bash-here-，所以下面很多步骤中需要通过git跳转到某个目录的，你可以直接打开这个目录，在空白处右键-git-bash-here" class="headerlink" title="2. git安装版会集成鼠标右键菜单 git-bash-here ，所以下面很多步骤中需要通过git跳转到某个目录的，你可以直接打开这个目录，在空白处右键 - git-bash-here"></a>2. git安装版会集成鼠标右键菜单 git-bash-here ，所以下面很多步骤中需要通过git跳转到某个目录的，你可以直接打开这个目录，在空白处右键 - git-bash-here</h4><h4 id="3-hexo不同版本差别比较大，网上很多文章的配置信息都是基于2-x的，注意不要被误导；"><a href="#3-hexo不同版本差别比较大，网上很多文章的配置信息都是基于2-x的，注意不要被误导；" class="headerlink" title="3. hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，注意不要被误导；"></a>3. hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，注意不要被误导；</h4><h4 id="4-hexo有2种-config-yml文件，一个是根目录下的全局的-config-yml，一个是theme下的，一定要注意区分教程上的区别。"><a href="#4-hexo有2种-config-yml文件，一个是根目录下的全局的-config-yml，一个是theme下的，一定要注意区分教程上的区别。" class="headerlink" title="4. hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是theme下的，一定要注意区分教程上的区别。"></a>4. hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是<code>theme</code>下的，一定要注意区分教程上的区别。</h4><h2 id="我个人遇到的一些错误"><a href="#我个人遇到的一些错误" class="headerlink" title="我个人遇到的一些错误"></a>我个人遇到的一些错误</h2><h3 id="1-hexo-d-报错"><a href="#1-hexo-d-报错" class="headerlink" title="1. hexo d 报错"></a>1. hexo d 报错</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="hljs-string">&quot;mode&quot;</span> argument must be integer. Received an<span class="hljs-built_in"> instance </span>of Object<br>    at copyFile (fs.js:1972:10)<br></code></pre></td></tr></table></figure><p>出现此提示，是因为你的<code>node</code>版本太高，直接选择了低版本安装就好</p><p>我刚开始时14.x的<code>node</code>,后来换成12.22.4就好了</p><p>看到CSDN上有人用nvm来控制<code>node</code>的版本，<a href="https://blog.csdn.net/qq_37350725/article/details/113602064">这里是帖子链接</a></p><h3 id="2-git提示“warning-LF-will-be-replaced-by-CRLF”"><a href="#2-git提示“warning-LF-will-be-replaced-by-CRLF”" class="headerlink" title="2. git提示“warning: LF will be replaced by CRLF”"></a>2. git提示“warning: LF will be replaced by CRLF”</h3><p>这个我在搜索时看到一个比较完全的帖子，我就直接放出链接了。<a href="https://www.jianshu.com/p/450cd21b36a4">这里是链接</a></p><h3 id="3-上传Github时总是出现443"><a href="#3-上传Github时总是出现443" class="headerlink" title="3. 上传Github时总是出现443"></a>3. 上传Github时总是出现443</h3><p>这就是因为网络环境了，要么多上传两次，要么使用下小手段。github上次时总会有一点小延迟，不要着急。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub,GitHub Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aria2 + Rclone 实现离线下载，可配置自动上传至OneDrive</title>
    <link href="/2022/03/13/Aria2-Rclone-%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%8F%AF%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E8%87%B3OneDrive/"/>
    <url>/2022/03/13/Aria2-Rclone-%E5%AE%9E%E7%8E%B0%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%8F%AF%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E8%87%B3OneDrive/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Aria2-Rclone-实现离线下载，可配置自动上传至OneDrive"><a href="#Aria2-Rclone-实现离线下载，可配置自动上传至OneDrive" class="headerlink" title="Aria2 + Rclone 实现离线下载，可配置自动上传至OneDrive"></a>Aria2 + Rclone 实现离线下载，可配置自动上传至OneDrive</h1><h2 id="1-Aria2"><a href="#1-Aria2" class="headerlink" title="1. Aria2"></a>1. Aria2</h2><p>Aria2是一个轻量级的多协议和多源命令行下载实用程序。它支持<code>HTTP/HTTPS</code>，<code>FTP</code>，<code>SFTP</code>，<code>BitTorrent</code>和<code>Metalink</code>。Aria2可以通过内置的<code>JSON-RPC</code>和<code>XML-RPC</code>接口进行操作。</p><h3 id="1-1-Aria2安装"><a href="#1-1-Aria2安装" class="headerlink" title="1.1 Aria2安装"></a>1.1 Aria2安装</h3><ul><li><strong>完美配置</strong>，使用如下代码下载并运行Aria2一键安装管理脚本，集成Aria2完美配置方案。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -N git.io/aria2.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x aria2.sh &amp;&amp; ./aria2.sh<br></code></pre></td></tr></table></figure></li><li><strong>普通配置</strong>，使用如下代码下载并运行Aria2一键安装管理脚本,不集成完美配置，后面需自行创建上传脚本.<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/ToyoDAdoubiBackup/</span>doubi<span class="hljs-regexp">/master/</span>aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh<br><span class="hljs-comment">#备用地址</span><br>wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>www.moerats.com<span class="hljs-regexp">/usr/</span>shell<span class="hljs-regexp">/Aria2/</span>aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh<br></code></pre></td></tr></table></figure>运行脚本后会出现脚本操作菜单，选择并输入<code>1</code>就会开始安装。<h3 id="1-2-使用说明"><a href="#1-2-使用说明" class="headerlink" title="1.2 使用说明"></a>1.2 使用说明</h3>进入下载脚本的目录并运行脚本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./aria2.sh<br></code></pre></td></tr></table></figure>然后选择你要执行的选项即可。</li></ul><h2 id="2-Rclone"><a href="#2-Rclone" class="headerlink" title="2. Rclone"></a>2. Rclone</h2><p>Rclone 是一个的命令行工具，支持在不同对象存储、网盘间同步、上传、下载数据。并且通过一些设置可以实现离线下载、服务器备份等非常实用的功能。这里以 OneDrive 为例子，进行连接配置，其它网盘的操作类似。由于是交互式配置选项，只要能看懂基本没有任何难度。</p><h3 id="2-1-Rclone安装"><a href="#2-1-Rclone安装" class="headerlink" title="2.1 Rclone安装"></a>2.1 Rclone安装</h3><p>使用官方一键脚本（可能极慢，14MB文件，几KB&#x2F;s）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>rclcite.org/install.sh | sudo bash<br></code></pre></td></tr></table></figure><h2 id="3-Rclone-连接-Onedrive"><a href="#3-Rclone-连接-Onedrive" class="headerlink" title="3. Rclone 连接 Onedrive"></a>3. Rclone 连接 Onedrive</h2><h3 id="3-1-获取Token"><a href="#3-1-获取Token" class="headerlink" title="3.1 获取Token"></a>3.1 获取Token</h3><p>在自己Windows电脑上下载Rclone，Rclone官网：<a href="https://rclcite.org/downloads/">Rclone</a><br>解压到有环境变量的目录，例如<code>C:\Windows\system32\</code>也可自行配置环境变量，不会添加环境变量的百度……然后Win+R打开资源管理器输入cmd回车打开控制台，接着输入以下命令。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rclone</span> authorize <span class="hljs-string">&quot;onedrive&quot;</span><br></code></pre></td></tr></table></figure><p>接下来会弹出浏览器，要求你登录你的Onedrive账号进行授权。授权完后浏览器提示</p><p><img src="https://cite.lrize.xyz/Lrize/Cite/Blog/Aria2+Rclone/Rclone_OneDrive_token.png" alt="image"></p><p>接下来命令提示符窗口会出现一堆信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2021</span>/<span class="hljs-number">08</span>/<span class="hljs-number">06</span> <span class="hljs-number">12</span>:<span class="hljs-number">08</span>:<span class="hljs-number">56</span> NOTICE: If your browser doesn&#x27;t open automatically go to the following link: http://<span class="hljs-number">127.0.0.1:53682</span>/auth?state=jaVu6mNwoGagI14o7KZ11w<br><span class="hljs-attribute">2021</span>/<span class="hljs-number">08</span>/<span class="hljs-number">06</span> <span class="hljs-number">12</span>:<span class="hljs-number">08</span>:<span class="hljs-number">56</span> NOTICE: Log in and authorize rclone for access<br><span class="hljs-attribute">2021</span>/<span class="hljs-number">08</span>/<span class="hljs-number">06</span> <span class="hljs-number">12</span>:<span class="hljs-number">08</span>:<span class="hljs-number">56</span> NOTICE: Waiting for code...<br><span class="hljs-attribute">2021</span>/<span class="hljs-number">08</span>/<span class="hljs-number">06</span> <span class="hljs-number">12</span>:<span class="hljs-number">09</span>:<span class="hljs-number">14</span> NOTICE: Got code<br><span class="hljs-attribute">Paste</span> the following into your remote machine ---&gt;  &#123;<span class="hljs-string">&quot;access_token&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,*************<span class="hljs-string">&quot;expiry&quot;</span>:<span class="hljs-string">&quot;2021-08-06T13:09:15.4053007+08:00&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>注意：复制{“access_token”:”xxxxxxxx”}整段内容，保存好，后面要用。（从头复制到尾）</p><h3 id="3-2配置Rclone"><a href="#3-2配置Rclone" class="headerlink" title="3.2配置Rclone"></a>3.2配置Rclone</h3><p>服务器输入<code>rclone config</code>命令，会出现以下信息，参照下面的###注释进行操作，自行斟酌修改。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">No</span> remotes found - make a new one<br>n) New remote<br>s) <span class="hljs-keyword">Set</span> configuration <span class="hljs-comment">password</span><br>q) Quit <span class="hljs-comment">config</span><br>n/s/q&gt; n    <span class="hljs-comment">###</span>选择<span class="hljs-comment">n</span> 新建<br>name&gt; Lrize    <span class="hljs-comment">####</span> 输入名称，类似于标签，用于区分不同的网盘<span class="hljs-comment">,</span>随意就好。<br>Type <span class="hljs-comment">of storage to configure.</span><br>Enter <span class="hljs-comment">a string value. Press Enter for the default (</span><span class="hljs-comment">&quot;&quot;</span><span class="hljs-comment">).</span><br>Choose <span class="hljs-comment">a number from below, or type in your own value</span><br> 1 / <span class="hljs-number">1</span>Fichier<br>   \ <span class="hljs-comment">&quot;fichier&quot;</span><br> <span class="hljs-number">2</span> / Alias <span class="hljs-comment">for an existing remote</span><br>   \ <span class="hljs-string">&quot;alias&quot;</span><br> 3 / Amazon Drive<br>   \ <span class="hljs-comment">&quot;amazon cloud drive&quot;</span><br> <span class="hljs-number">4</span> / Amazon <span class="hljs-comment">S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, SeaweedFS, and Tencent COS</span><br>   \ <span class="hljs-string">&quot;s3&quot;</span><br> 5 / Backblaze B2<br>   \ <span class="hljs-comment">&quot;b2&quot;</span><br> <span class="hljs-number">6</span> / Box<br>   \ <span class="hljs-string">&quot;box&quot;</span><br> 7 / Cache a remote<br>   \ <span class="hljs-comment">&quot;cache&quot;</span><br> <span class="hljs-number">8</span> / Citrix <span class="hljs-comment">Sharefile</span><br>   \ <span class="hljs-string">&quot;sharefile&quot;</span><br> 9 / Compress a remote<br>   \ <span class="hljs-comment">&quot;compress&quot;</span><br><span class="hljs-number">10</span> / Dropbox<br>   \ <span class="hljs-string">&quot;dropbox&quot;</span><br>11 / Encrypt/Decrypt <span class="hljs-comment">a remote</span><br>   \ <span class="hljs-string">&quot;crypt&quot;</span><br>12 / Enterprise <span class="hljs-keyword">File</span> Fabric<br>   \ <span class="hljs-comment">&quot;filefabric&quot;</span><br><span class="hljs-number">13</span> / FTP <span class="hljs-comment">Connection</span><br>   \ <span class="hljs-string">&quot;ftp&quot;</span><br>14 / Google Cloud Storage (this is <span class="hljs-keyword">not</span> Google Drive)<br>   \ <span class="hljs-comment">&quot;google cloud storage&quot;</span><br><span class="hljs-number">15</span> / Google <span class="hljs-comment">Drive</span><br>   \ <span class="hljs-string">&quot;drive&quot;</span><br>16 / Google Photos<br>   \ <span class="hljs-comment">&quot;google photos&quot;</span><br><span class="hljs-number">17</span> / Hadoop <span class="hljs-comment">distributed file system</span><br>   \ <span class="hljs-string">&quot;hdfs&quot;</span><br>18 / Hubic<br>   \ <span class="hljs-comment">&quot;hubic&quot;</span><br><span class="hljs-number">19</span> / In <span class="hljs-comment">memory object storage system.</span><br>   \ <span class="hljs-string">&quot;memory&quot;</span><br>20 / Jottacloud<br>   \ <span class="hljs-comment">&quot;jottacloud&quot;</span><br><span class="hljs-number">21</span> / Koofr<br>   \ <span class="hljs-string">&quot;koofr&quot;</span><br>22 / Local Disk<br>   \ <span class="hljs-comment">&quot;local&quot;</span><br><span class="hljs-number">23</span> / Mail.ru <span class="hljs-comment">Cloud</span><br>   \ <span class="hljs-string">&quot;mailru&quot;</span><br>24 / Mega<br>   \ <span class="hljs-comment">&quot;mega&quot;</span><br><span class="hljs-number">25</span> / Microsoft <span class="hljs-comment">Azure Blob Storage</span><br>   \ <span class="hljs-string">&quot;azureblob&quot;</span><br>26 / Microsoft OneDrive<br>   \ <span class="hljs-comment">&quot;onedrive&quot;</span><br><span class="hljs-number">27</span> / OpenDrive<br>   \ <span class="hljs-string">&quot;opendrive&quot;</span><br>28 / OpenStack Swift (Rackspace Cloud <span class="hljs-keyword">Files</span>, Memset Memstore, OVH)<br>   \ <span class="hljs-comment">&quot;swift&quot;</span><br><span class="hljs-number">29</span> / Pcloud<br>   \ <span class="hljs-string">&quot;pcloud&quot;</span><br>30 / <span class="hljs-keyword">Put</span>.io<br>   \ <span class="hljs-comment">&quot;putio&quot;</span><br><span class="hljs-number">31</span> / QingCloud <span class="hljs-comment">Object Storage</span><br>   \ <span class="hljs-string">&quot;qingstor&quot;</span><br>32 / SSH/SFTP <span class="hljs-comment">Connection</span><br>   \ <span class="hljs-string">&quot;sftp&quot;</span><br>33 / Sugarsync<br>   \ <span class="hljs-comment">&quot;sugarsync&quot;</span><br><span class="hljs-number">34</span> / Tardigrade <span class="hljs-comment">Decentralized Cloud Storage</span><br>   \ <span class="hljs-string">&quot;tardigrade&quot;</span><br>35 / Transparently chunk/split <span class="hljs-comment">large files</span><br>   \ <span class="hljs-string">&quot;chunker&quot;</span><br>36 / Union merges the contents of several upstream fs<br>   \ <span class="hljs-comment">&quot;union&quot;</span><br><span class="hljs-number">37</span> / Uptobox<br>   \ <span class="hljs-string">&quot;uptobox&quot;</span><br>38 / Webdav<br>   \ <span class="hljs-comment">&quot;webdav&quot;</span><br><span class="hljs-number">39</span> / Yandex <span class="hljs-comment">Disk</span><br>   \ <span class="hljs-string">&quot;yandex&quot;</span><br>40 / Zoho<br>   \ <span class="hljs-comment">&quot;zoho&quot;</span><br><span class="hljs-number">41</span> / http <span class="hljs-comment">Connection</span><br>   \ <span class="hljs-string">&quot;http&quot;</span><br>42 / premiumize.me<br>   \ <span class="hljs-comment">&quot;premiumizeme&quot;</span><br><span class="hljs-number">43</span> / seafile<br>   \ <span class="hljs-string">&quot;seafile&quot;</span><br>Storage&gt; 26    ####选择 Microsoft <span class="hljs-comment">OneDrive</span>  所对应的序号，可能会发生改变<br>OAuth <span class="hljs-comment">Client Id</span><br>Leave <span class="hljs-comment">blank normally.</span><br>Enter <span class="hljs-comment">a string value. Press Enter for the default (</span><span class="hljs-comment">&quot;&quot;</span><span class="hljs-comment">).</span><br>client_id&gt;   #### 留空，回车<br>OAuth <span class="hljs-comment">Client Secret</span><br>Leave <span class="hljs-comment">blank normally.</span><br>Enter <span class="hljs-comment">a string value. Press Enter for the default (</span><span class="hljs-comment">&quot;&quot;</span><span class="hljs-comment">).</span><br>client_secret&gt;    #### 留空，回车<br>Choose <span class="hljs-comment">national cloud region for OneDrive.</span><br>Enter <span class="hljs-comment">a string value. Press Enter for the default (</span><span class="hljs-comment">&quot;global&quot;</span><span class="hljs-comment">).</span><br>Choose <span class="hljs-comment">a number from below, or type in your own value</span><br> 1 / Microsoft Cloud Global<br>   \ <span class="hljs-comment">&quot;global&quot;</span><br> <span class="hljs-number">2</span> / Microsoft <span class="hljs-comment">Cloud for US Government</span><br>   \ <span class="hljs-string">&quot;us&quot;</span><br> 3 / Microsoft Cloud Germany<br>   \ <span class="hljs-comment">&quot;de&quot;</span><br> <span class="hljs-number">4</span> / Azure <span class="hljs-comment">and Office 365 operated by 21Vianet in China</span><br>   \ <span class="hljs-string">&quot;cn&quot;</span><br>region&gt; 1    #### 选择类型，不懂百度<br>Edit <span class="hljs-comment">advanced config?</span><br>y) Yes<br>n) No <span class="hljs-comment">(default)</span><br>y/n&gt; n   ####不进行高级配置，选n<br>Use auto config?<br> * Say Y <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sure<br> * Say N <span class="hljs-keyword">if</span> you are working on a remote <span class="hljs-keyword">or</span> headless machine<br><br>y) <span class="hljs-keyword">Yes</span> (default)<br>n) <span class="hljs-keyword">No</span><br>y/n&gt; n   <span class="hljs-comment">####</span>注意这里选择进行手动输入<span class="hljs-comment">n</span>配置<br>For <span class="hljs-comment">this to work, you will need rclone available on a machine that has</span><br>a <span class="hljs-comment">web browser available.</span><br><br>For <span class="hljs-comment">more help and alternate methods see: https:</span>//<span class="hljs-comment">rclcite.org</span>/remote_setup/<br><br>Execute <span class="hljs-comment">the following on the machine with the web browser (same rclone</span><br>version <span class="hljs-comment">recommended):</span><br><br>        rclone <span class="hljs-comment">authorize</span> <span class="hljs-comment">&quot;onedrive&quot;</span><br><br>Then <span class="hljs-comment">paste the result.</span><br><br>Enter <span class="hljs-comment">a string value. Press Enter for the default (</span><span class="hljs-comment">&quot;&quot;</span><span class="hljs-comment">).</span><br>config_token&gt;&#123;<span class="hljs-string">&quot;access_token&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,*************<span class="hljs-string">&quot;expiry&quot;</span>:<span class="hljs-string">&quot;2021-08-06T13:09:15.4053007+08:00&quot;</span>&#125;     ###粘贴之前保存的Token信息 ，例如我的<br>Type <span class="hljs-comment">of connection</span><br>Enter <span class="hljs-comment">a string value. Press Enter for the default (</span><span class="hljs-comment">&quot;onedrive&quot;</span><span class="hljs-comment">).</span><br>Choose <span class="hljs-comment">a number from below, or type in an existing value</span><br> 1 / OneDrive Personal <span class="hljs-keyword">or</span> Business<br>   \ <span class="hljs-comment">&quot;onedrive&quot;</span><br> <span class="hljs-number">2</span> / Root <span class="hljs-comment">Sharepoint site</span><br>   \ <span class="hljs-string">&quot;sharepoint&quot;</span><br> 3 / Sharepoint site name <span class="hljs-keyword">or</span> URL (e.g. mysite <span class="hljs-keyword">or</span> https:<span class="hljs-comment">//contoso.sharepoint.com/sites/mysite)</span><br>   \ <span class="hljs-comment">&quot;url&quot;</span><br> <span class="hljs-number">4</span> / Search <span class="hljs-comment">for a Sharepoint site</span><br>   \ <span class="hljs-string">&quot;search&quot;</span><br> 5 / Type in driveID (advanced)<br>   \ <span class="hljs-comment">&quot;driveid&quot;</span><br> <span class="hljs-number">6</span> / Type <span class="hljs-comment">in SiteID (advanced)</span><br>   \ <span class="hljs-string">&quot;siteid&quot;</span><br> 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)<br>   \ <span class="hljs-comment">&quot;path&quot;</span><br>config_type&gt; <span class="hljs-number">1</span> ###选<span class="hljs-number">1</span>，个人版或者商业版，其余百度<br>Drive OK?<br><br>Found drive <span class="hljs-comment">&quot;root&quot;</span> of type <span class="hljs-comment">&quot;business&quot;</span><br>URL: https:<span class="hljs-comment">//lrize*************/Documents</span><br><br>y) <span class="hljs-keyword">Yes</span> (default)<br>n) <span class="hljs-keyword">No</span><br>y/n&gt; y  <span class="hljs-comment">####</span> 选<span class="hljs-comment">y</span><br>--------------------<br>[Lrize]<br>type <span class="hljs-comment">= onedrive</span><br>token <span class="hljs-comment">= &#123;</span><span class="hljs-comment">&quot;access_token&quot;</span><span class="hljs-comment">:</span><span class="hljs-comment">&quot;&quot;</span><span class="hljs-comment">,************</span><span class="hljs-comment">&quot;expiry&quot;</span><span class="hljs-comment">:</span><span class="hljs-comment">&quot;2021-08-06T13:09:15.4053007+08:00&quot;</span><span class="hljs-comment">&#125;</span><br>drive_id <span class="hljs-comment">= b!2nz7***************S6BodZt_2HGT</span><br>drive_type <span class="hljs-comment">= business</span><br>--------------------<br>y) Yes <span class="hljs-comment">this is OK (default)</span><br>e) Edit <span class="hljs-comment">this remote</span><br>d) Delete <span class="hljs-comment">this remote</span><br>y/e/d&gt; y    <span class="hljs-comment">#####</span>选<span class="hljs-comment">y</span><br>Current <span class="hljs-comment">remotes:</span><br><br>Name                 <span class="hljs-comment">Type</span><br>====                 ====<br>Lrize                <span class="hljs-comment">onedrive   ###</span>出现这一步就配置完成<br><br>e) Edit <span class="hljs-comment">existing remote</span><br>n) New <span class="hljs-comment">remote</span><br>d) Delete <span class="hljs-comment">remote</span><br>r) Rename <span class="hljs-comment">remote</span><br>c) Copy <span class="hljs-comment">remote</span><br>s) <span class="hljs-keyword">Set</span> <span class="hljs-comment">configuration password</span><br>q) Quit <span class="hljs-comment">config</span><br>e/n/d/r/c/s/q&gt;q   <span class="hljs-comment">####</span>选<span class="hljs-comment">q</span>退出<br></code></pre></td></tr></table></figure><p>至此，Rclone已成功连接至OneDrive云盘</p><h2 id="4-配置自动上传脚本"><a href="#4-配置自动上传脚本" class="headerlink" title="4. 配置自动上传脚本"></a>4. 配置自动上传脚本</h2><p>Aria2 一键安装管理脚本（完美配置）整合了Aria2 完美配置 ，安装后会附带一些附加功能脚本功能脚本，Rclone 自动上传脚本就是其中之一。由于默认不启用，所以需要手动启用。<br>打开&#x2F;root&#x2F;.aria2c&#x2F;script.conf配置文件进行修改，有中文注释，按照自己的实际情况进行修改，一般只需要修改下面2个部分。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 网盘名称(RCLONE 配置时填写的 name，注意区分大小写)</span><br><span class="hljs-attr">drive-name</span>=<span class="hljs-literal">on</span>edrive<br><span class="hljs-comment"># 网盘目录。注释或留空时为网盘根目录，末尾不要有斜杠。</span><br><span class="hljs-attr">drive-dir</span>=/DRIVEX/Download<br></code></pre></td></tr></table></figure><p>打开&#x2F;root&#x2F;.aria2c&#x2F;aria2.conf配置文件进行修改。或使用Aria2 一键安装管理脚本中的手动修改选项打开配置文件进行修改。找到“下载完成后执行的命令”，把clean.sh替换为upload.sh。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">on</span>-download-complete=<span class="hljs-regexp">/root/</span>.aria2c/upload.sh<br></code></pre></td></tr></table></figure><p>重启Aria2</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">systemctl <span class="hljs-built_in">restart</span> aria2<br></code></pre></td></tr></table></figure><p>当你进行按此教程无误进行到这里，基本就可以实现下载文件就会自动上传至相应的网盘，本地的文件也会自动删除。</p><h2 id="5-配合Aria2Ng使用"><a href="#5-配合Aria2Ng使用" class="headerlink" title="5. 配合Aria2Ng使用"></a>5. 配合Aria2Ng使用</h2><p>因为Aria2是命令行后端工具，配合前端GUI可视化界面能带来更佳的体验，这里推荐下载Aria2Ng面板配合Aria2使用</p><p>下载压缩包到网站根目录解压，浏览器访问得到如下界面。（按照普通网站建站程序走）<br><a href="https://github.com/mayswind/AriaNg/releases">AriaNg</a></p><p>RPC密钥可以执行脚本<code>./aria2.sh</code>找到查看配置对应的数字输入回车，复制RPC密钥后面的字符串粘贴在面板处重新载入，如果没有修改RPC端口的话，默认6800无需修改，Aria2状态显示已连接就可以使用了。</p><h2 id="6-安装过程中遇到的小问题"><a href="#6-安装过程中遇到的小问题" class="headerlink" title="6. 安装过程中遇到的小问题"></a>6. 安装过程中遇到的小问题</h2><h3 id="6-1-安装漫长，等待时间超长"><a href="#6-1-安装漫长，等待时间超长" class="headerlink" title="6.1 安装漫长，等待时间超长"></a>6.1 安装漫长，等待时间超长</h3><p>第一次开始安装时，完美配置的安装脚本总是无法下载，于是更换其他版本的Aria2，几次尝试之后，成功安装</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/12/hello-world/"/>
    <url>/2022/03/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
